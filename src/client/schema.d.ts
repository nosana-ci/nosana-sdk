/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/jobs/create-with-credits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a job using credits
         * @description Create a job using credits. Supports both JWT tokens (Bearer <jwt>) and API keys (Bearer nos_...)
         */
        post: operations["postApiJobsCreate-with-credits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/extend-with-credits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Extend a job using credits
         * @description Extend a job using credits. Supports both JWT tokens (Bearer <jwt>) and API keys (Bearer nos_...)
         */
        post: operations["postApiJobsExtend-with-credits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/stop-with-credits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop a job paid with credits
         * @description Stop a job paid with credits. Supports both JWT tokens (Bearer <jwt>) and API keys (Bearer nos_...)
         */
        post: operations["postApiJobsStop-with-credits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiJobsByAddress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/markets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiMarkets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/markets/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiMarketsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/markets/{id}/required-resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiMarketsByIdRequired-resources"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/credits/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current user's credit balance
         * @description Authentication required via Authorization header. Supports either JWT (Bearer <jwt>) or API key (Bearer <key>). Available balance is assignedCredits - reservedCredits - settledCredits.
         */
        get: operations["getApiCreditsBalance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all user deployments. */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of deployments. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Deployments"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/{deployment}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a specific deployment by ID. */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Gets a deployment by ID. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Deployment"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/{deployment}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get scheduled tasks for a specific deployment. */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of scheduled tasks for the deployment. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Task"][];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/{deployment}/header": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get header for a specific deployment. */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns authorization header to interact with the vaults jobs. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            header: string;
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new deployment. */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["DeploymentCreateBody"];
                };
            };
            responses: {
                /** @description Deployment created successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Deployment"];
                    };
                };
                /** @description Invalid request body. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/{deployment}/create-revision": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new deployment revision. */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["JobDefinition"];
                };
            };
            responses: {
                /** @description Deployment CreateRevisioned successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            active_revision: number;
                            endpoints: {
                                opId: string;
                                port: number | string;
                                url: string;
                            }[];
                            revisions: {
                                revision: number;
                                deployment: string;
                                ipfs_definition_hash: string;
                                job_definition: {
                                    version: string;
                                    /** @enum {string} */
                                    type: "container";
                                    logistics?: {
                                        send?: {
                                            /**
                                             * @description api-listen - we have an api listenening for the job poster to send the job description
                                             *     api        - we recieve an api endpoint to query and it will return the job description
                                             * @enum {string}
                                             */
                                            type: "api" | "api-listen";
                                            args: {
                                                endpoint?: string;
                                            };
                                        };
                                        receive?: {
                                            /**
                                             * @description api-listen - we have an api that listen for request from the job poster, so we can return the result to them
                                             *     api        - we get an api to post the result to
                                             * @enum {string}
                                             */
                                            type: "api" | "api-listen";
                                            args: {
                                                endpoint?: string;
                                            };
                                        };
                                    };
                                    deployment_id?: string;
                                    meta?: {
                                        trigger?: string;
                                        system_resources?: {
                                            [key: string]: string | number;
                                        };
                                    } & {
                                        [key: string]: unknown;
                                    };
                                    global?: {
                                        image?: string;
                                        gpu?: boolean;
                                        entrypoint?: string | string[];
                                        env?: {
                                            [key: string]: string;
                                        };
                                        work_dir?: string;
                                        variables?: {
                                            [key: string]: string;
                                        };
                                    };
                                    /** @description **********************
                                     *     Job Definition Types *
                                     *     ********************** */
                                    ops: {
                                        /** @enum {string} */
                                        type: "container/run" | "container/create-volume";
                                        id: string;
                                        args: {
                                            image: string;
                                            aliases?: string | string[];
                                            cmd?: string | string[];
                                            volumes?: {
                                                name: string;
                                                dest: string;
                                            }[];
                                            expose?: number | string | {
                                                __spread__: string;
                                            } | (number | string | {
                                                port: number | string;
                                                /** @enum {string} */
                                                type?: "web" | "api" | "websocket" | "webapi" | "none";
                                                health_checks?: ({
                                                    /** @enum {string} */
                                                    type: "http";
                                                    path: string;
                                                    /** @enum {string} */
                                                    method: "GET" | "POST" | "PUT" | "DELETE";
                                                    expected_status: number;
                                                    /** @description Construct a type with a set of properties K of type T */
                                                    headers?: {
                                                        [key: string]: string;
                                                    };
                                                    body?: unknown;
                                                    continuous: boolean;
                                                } | {
                                                    /** @enum {string} */
                                                    type: "websocket";
                                                    expected_response: string;
                                                    continuous: boolean;
                                                })[];
                                            } | {
                                                __spread__: string;
                                            })[];
                                            private?: boolean;
                                            gpu?: boolean;
                                            work_dir?: string;
                                            output?: string;
                                            entrypoint?: string | string[];
                                            env?: {
                                                [key: string]: string;
                                            };
                                            required_vram?: number;
                                            resources?: ({
                                                /** @enum {string} */
                                                type: "S3";
                                                target: string;
                                                url?: string;
                                                allowWrite?: boolean;
                                                files?: string[];
                                                IAM?: {
                                                    REGION: string;
                                                    ACCESS_KEY_ID: string;
                                                    SECRET_ACCESS_KEY: string;
                                                };
                                            } | {
                                                /** @enum {string} */
                                                type: "S3";
                                                target: string;
                                                bucket: string;
                                                url?: string;
                                                allowWrite?: boolean;
                                                IAM?: {
                                                    REGION: string;
                                                    ACCESS_KEY_ID: string;
                                                    SECRET_ACCESS_KEY: string;
                                                };
                                            } | {
                                                /** @enum {string} */
                                                type: "S3";
                                                target: string;
                                                buckets: {
                                                    url: string;
                                                    files?: string[];
                                                }[];
                                                url?: string;
                                                allowWrite?: boolean;
                                                IAM?: {
                                                    REGION: string;
                                                    ACCESS_KEY_ID: string;
                                                    SECRET_ACCESS_KEY: string;
                                                };
                                            } | {
                                                /** @enum {string} */
                                                type: "HF";
                                                target: string;
                                                repo: string;
                                                revision?: string;
                                                files?: string[];
                                                accessToken?: string;
                                            } | {
                                                /** @enum {string} */
                                                type: "Ollama";
                                                model: string;
                                                target?: string;
                                            } | {
                                                __spread__: string;
                                            } | "__remove-if-empty__")[];
                                            authentication?: {
                                                docker?: {
                                                    username?: string;
                                                    password?: string;
                                                    email?: string;
                                                    server?: string;
                                                };
                                            };
                                        } | {
                                            name: string;
                                        };
                                        results?: {
                                            [key: string]: string | {
                                                regex: string;
                                                logType: (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | ("stdin" | "stdout" | "stderr" | "nodeerr")[];
                                            };
                                        };
                                        execution?: {
                                            group?: string;
                                            depends_on: string[];
                                            stop_if_dependent_stops?: boolean;
                                        } | {
                                            group?: string;
                                        };
                                    }[];
                                };
                                /** Format: date-time */
                                created_at: string;
                            }[];
                            /** Format: date-time */
                            updated_at: string;
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/{deployment}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Start an existing deployment. */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deployment started successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status: "STARTING";
                            /** Format: date-time */
                            updated_at: string;
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/{deployment}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Stop a deployment */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deployment stopped successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status: "STOPPING";
                            /** Format: date-time */
                            updated_at: string;
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/{deployment}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Archive a deployment */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deployment archived successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status: "ARCHIVED";
                            /** Format: date-time */
                            updated_at: string;
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/{deployment}/update-active-revision": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update deployment active revision. */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        active_revision: number;
                    };
                };
            };
            responses: {
                /** @description Deployment active revision updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            active_revision: number;
                            endpoints: components["schemas"]["Endpoint"][];
                            updated_at: string;
                        };
                    };
                };
                /** @description Bad Request. Invalid input data. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/deployments/{deployment}/update-replica-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update the replica count of a deployment */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        replicas: number;
                    };
                };
            };
            responses: {
                /** @description Deployment replica count updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            replicas: number;
                            /** Format: date-time */
                            updated_at: string;
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/deployments/{deployment}/update-schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update deployment schedule. */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Cron expression for scheduled deployments */
                        schedule: string;
                    };
                };
            };
            responses: {
                /** @description Deployment schedule updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Cron expression for scheduled deployments */
                            schedule: string;
                            updated_at: string;
                        };
                    };
                };
                /** @description Bad Request. Invalid input data. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/deployments/{deployment}/update-timeout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update deployment timeout */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        timeout: number;
                    };
                };
            };
            responses: {
                /** @description Deployment timeout updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            timeout: number;
                            updated_at: string;
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/deployments/jobs/{job}/job-definition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the job definition for a job. */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path: {
                    job: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Job definition details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JobDefinition"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/jobs/{job}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a jobs results. */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    job: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Job results. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JobResults"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /** @description Post results for your running job. */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path: {
                    job: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["JobResults"];
                };
            };
            responses: {
                /** @description Job results details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            message: "Success";
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/vaults": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all user vaults. */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of vaults. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Vaults"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/vaults/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a shared vault. */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Vault created successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Vault"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments/vaults/{vault}/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Withdraw from a vault. */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
                    "x-user-id"?: string;
                    /**
                     * @description Authentication token, either an API key or a wallet-signed message.
                     * @example Bearer <ApiKey> or WalletSignedMessage
                     */
                    authorization: string;
                };
                path: {
                    vault: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        SOL?: number;
                        NOS?: number;
                    };
                };
            };
            responses: {
                /** @description Withdrawal successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            transaction: string;
                        };
                    };
                };
                /** @description Invalid request body. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Vault not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Headers
         * @description Headers for deployment routes
         */
        Headers: {
            /** @description Required when using Wallet Authentication. The public key used to sign authentication header. */
            "x-user-id": string;
            /**
             * @description Authentication token, either an API key or a wallet-signed message.
             * @example Bearer <ApiKey> or WalletSignedMessage
             */
            authorization: string;
        };
        /**
         * HostHeaders
         * @description Headers for deployment routes
         */
        HostHeaders: {
            /** @description Signed authentication message, */
            authorization: string;
        };
        /** Deployment */
        Deployment: {
            id: string;
            name: string;
            vault: string;
            market: string;
            owner: string;
            status: "DRAFT" | "ERROR" | "STARTING" | "RUNNING" | "STOPPING" | "STOPPED" | "INSUFFICIENT_FUNDS" | "ARCHIVED";
            revisions: {
                revision: number;
                deployment: string;
                ipfs_definition_hash: string;
                job_definition: {
                    version: string;
                    /** @enum {string} */
                    type: "container";
                    logistics?: {
                        send?: {
                            /**
                             * @description api-listen - we have an api listenening for the job poster to send the job description
                             *     api        - we recieve an api endpoint to query and it will return the job description
                             * @enum {string}
                             */
                            type: "api" | "api-listen";
                            args: {
                                endpoint?: string;
                            };
                        };
                        receive?: {
                            /**
                             * @description api-listen - we have an api that listen for request from the job poster, so we can return the result to them
                             *     api        - we get an api to post the result to
                             * @enum {string}
                             */
                            type: "api" | "api-listen";
                            args: {
                                endpoint?: string;
                            };
                        };
                    };
                    deployment_id?: string;
                    meta?: {
                        trigger?: string;
                        system_resources?: {
                            [key: string]: string | number;
                        };
                    } & {
                        [key: string]: unknown;
                    };
                    global?: {
                        image?: string;
                        gpu?: boolean;
                        entrypoint?: string | string[];
                        env?: {
                            [key: string]: string;
                        };
                        work_dir?: string;
                        variables?: {
                            [key: string]: string;
                        };
                    };
                    /** @description **********************
                     *     Job Definition Types *
                     *     ********************** */
                    ops: {
                        /** @enum {string} */
                        type: "container/run" | "container/create-volume";
                        id: string;
                        args: {
                            image: string;
                            aliases?: string | string[];
                            cmd?: string | string[];
                            volumes?: {
                                name: string;
                                dest: string;
                            }[];
                            expose?: number | string | {
                                __spread__: string;
                            } | (number | string | {
                                port: number | string;
                                /** @enum {string} */
                                type?: "web" | "api" | "websocket" | "webapi" | "none";
                                health_checks?: ({
                                    /** @enum {string} */
                                    type: "http";
                                    path: string;
                                    /** @enum {string} */
                                    method: "GET" | "POST" | "PUT" | "DELETE";
                                    expected_status: number;
                                    /** @description Construct a type with a set of properties K of type T */
                                    headers?: {
                                        [key: string]: string;
                                    };
                                    body?: unknown;
                                    continuous: boolean;
                                } | {
                                    /** @enum {string} */
                                    type: "websocket";
                                    expected_response: string;
                                    continuous: boolean;
                                })[];
                            } | {
                                __spread__: string;
                            })[];
                            private?: boolean;
                            gpu?: boolean;
                            work_dir?: string;
                            output?: string;
                            entrypoint?: string | string[];
                            env?: {
                                [key: string]: string;
                            };
                            required_vram?: number;
                            resources?: ({
                                /** @enum {string} */
                                type: "S3";
                                target: string;
                                url?: string;
                                allowWrite?: boolean;
                                files?: string[];
                                IAM?: {
                                    REGION: string;
                                    ACCESS_KEY_ID: string;
                                    SECRET_ACCESS_KEY: string;
                                };
                            } | {
                                /** @enum {string} */
                                type: "S3";
                                target: string;
                                bucket: string;
                                url?: string;
                                allowWrite?: boolean;
                                IAM?: {
                                    REGION: string;
                                    ACCESS_KEY_ID: string;
                                    SECRET_ACCESS_KEY: string;
                                };
                            } | {
                                /** @enum {string} */
                                type: "S3";
                                target: string;
                                buckets: {
                                    url: string;
                                    files?: string[];
                                }[];
                                url?: string;
                                allowWrite?: boolean;
                                IAM?: {
                                    REGION: string;
                                    ACCESS_KEY_ID: string;
                                    SECRET_ACCESS_KEY: string;
                                };
                            } | {
                                /** @enum {string} */
                                type: "HF";
                                target: string;
                                repo: string;
                                revision?: string;
                                files?: string[];
                                accessToken?: string;
                            } | {
                                /** @enum {string} */
                                type: "Ollama";
                                model: string;
                                target?: string;
                            } | {
                                __spread__: string;
                            } | "__remove-if-empty__")[];
                            authentication?: {
                                docker?: {
                                    username?: string;
                                    password?: string;
                                    email?: string;
                                    server?: string;
                                };
                            };
                        } | {
                            name: string;
                        };
                        results?: {
                            [key: string]: string | {
                                regex: string;
                                logType: (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | ("stdin" | "stdout" | "stderr" | "nodeerr")[];
                            };
                        };
                        execution?: {
                            group?: string;
                            depends_on: string[];
                            stop_if_dependent_stops?: boolean;
                        } | {
                            group?: string;
                        };
                    }[];
                };
                /** Format: date-time */
                created_at: string;
            }[];
            replicas: number;
            timeout: number;
            jobs: {
                tx: string;
                job: string;
                deployment: string;
                status: "PENDING" | "CONFIRMED" | "COMPLETED";
                /** Format: date-time */
                created_at: string;
            }[];
            events: {
                category: "Deployment" | "Event";
                deploymentId: string;
                type: string;
                message: string;
                tx?: string;
                /** Format: date-time */
                created_at: string;
            }[];
            endpoints: {
                opId: string;
                port: number | string;
                url: string;
            }[];
            confidential: boolean;
            active_revision: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        } & ({
            strategy: "SIMPLE" | "SIMPLE-EXTEND" | "INFINITE";
        } | {
            /** @enum {string} */
            strategy: "SCHEDULED";
            /** @description Cron expression for scheduled deployments */
            schedule: string;
        });
        /** Deployments */
        Deployments: components["schemas"]["Deployment"][];
        /** DeploymentStatus */
        DeploymentStatus: "DRAFT" | "ERROR" | "STARTING" | "RUNNING" | "STOPPING" | "STOPPED" | "INSUFFICIENT_FUNDS" | "ARCHIVED";
        /** DeploymentStrategy */
        DeploymentStrategy: "SIMPLE" | "SIMPLE-EXTEND" | "SCHEDULED" | "INFINITE";
        /** DeploymentCreateBody */
        DeploymentCreateBody: {
            name: string;
            market: string;
            replicas: number;
            timeout: number;
            vault?: string;
            confidential?: boolean;
            job_definition: {
                version: string;
                /** @enum {string} */
                type: "container";
                logistics?: {
                    send?: {
                        /**
                         * @description api-listen - we have an api listenening for the job poster to send the job description
                         *     api        - we recieve an api endpoint to query and it will return the job description
                         * @enum {string}
                         */
                        type: "api" | "api-listen";
                        args: {
                            endpoint?: string;
                        };
                    };
                    receive?: {
                        /**
                         * @description api-listen - we have an api that listen for request from the job poster, so we can return the result to them
                         *     api        - we get an api to post the result to
                         * @enum {string}
                         */
                        type: "api" | "api-listen";
                        args: {
                            endpoint?: string;
                        };
                    };
                };
                deployment_id?: string;
                meta?: {
                    trigger?: string;
                    system_resources?: {
                        [key: string]: string | number;
                    };
                } & {
                    [key: string]: unknown;
                };
                global?: {
                    image?: string;
                    gpu?: boolean;
                    entrypoint?: string | string[];
                    env?: {
                        [key: string]: string;
                    };
                    work_dir?: string;
                    variables?: {
                        [key: string]: string;
                    };
                };
                /** @description **********************
                 *     Job Definition Types *
                 *     ********************** */
                ops: {
                    /** @enum {string} */
                    type: "container/run" | "container/create-volume";
                    id: string;
                    args: {
                        image: string;
                        aliases?: string | string[];
                        cmd?: string | string[];
                        volumes?: {
                            name: string;
                            dest: string;
                        }[];
                        expose?: number | string | {
                            __spread__: string;
                        } | (number | string | {
                            port: number | string;
                            /** @enum {string} */
                            type?: "web" | "api" | "websocket" | "webapi" | "none";
                            health_checks?: ({
                                /** @enum {string} */
                                type: "http";
                                path: string;
                                /** @enum {string} */
                                method: "GET" | "POST" | "PUT" | "DELETE";
                                expected_status: number;
                                /** @description Construct a type with a set of properties K of type T */
                                headers?: {
                                    [key: string]: string;
                                };
                                body?: unknown;
                                continuous: boolean;
                            } | {
                                /** @enum {string} */
                                type: "websocket";
                                expected_response: string;
                                continuous: boolean;
                            })[];
                        } | {
                            __spread__: string;
                        })[];
                        private?: boolean;
                        gpu?: boolean;
                        work_dir?: string;
                        output?: string;
                        entrypoint?: string | string[];
                        env?: {
                            [key: string]: string;
                        };
                        required_vram?: number;
                        resources?: ({
                            /** @enum {string} */
                            type: "S3";
                            target: string;
                            url?: string;
                            allowWrite?: boolean;
                            files?: string[];
                            IAM?: {
                                REGION: string;
                                ACCESS_KEY_ID: string;
                                SECRET_ACCESS_KEY: string;
                            };
                        } | {
                            /** @enum {string} */
                            type: "S3";
                            target: string;
                            bucket: string;
                            url?: string;
                            allowWrite?: boolean;
                            IAM?: {
                                REGION: string;
                                ACCESS_KEY_ID: string;
                                SECRET_ACCESS_KEY: string;
                            };
                        } | {
                            /** @enum {string} */
                            type: "S3";
                            target: string;
                            buckets: {
                                url: string;
                                files?: string[];
                            }[];
                            url?: string;
                            allowWrite?: boolean;
                            IAM?: {
                                REGION: string;
                                ACCESS_KEY_ID: string;
                                SECRET_ACCESS_KEY: string;
                            };
                        } | {
                            /** @enum {string} */
                            type: "HF";
                            target: string;
                            repo: string;
                            revision?: string;
                            files?: string[];
                            accessToken?: string;
                        } | {
                            /** @enum {string} */
                            type: "Ollama";
                            model: string;
                            target?: string;
                        } | {
                            __spread__: string;
                        } | "__remove-if-empty__")[];
                        authentication?: {
                            docker?: {
                                username?: string;
                                password?: string;
                                email?: string;
                                server?: string;
                            };
                        };
                    } | {
                        name: string;
                    };
                    results?: {
                        [key: string]: string | {
                            regex: string;
                            logType: (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | ("stdin" | "stdout" | "stderr" | "nodeerr")[];
                        };
                    };
                    execution?: {
                        group?: string;
                        depends_on: string[];
                        stop_if_dependent_stops?: boolean;
                    } | {
                        group?: string;
                    };
                }[];
            };
        } & ({
            strategy: "SIMPLE" | "SIMPLE-EXTEND" | "INFINITE";
        } | {
            /** @enum {string} */
            strategy: "SCHEDULED";
            /** @description Cron expression for scheduled deployments */
            schedule: string;
        });
        /** Endpoint */
        Endpoint: {
            opId: string;
            port: number | string;
            url: string;
        };
        /** Error */
        Error: {
            error: string;
        };
        /** Events */
        Events: {
            category: "Deployment" | "Event";
            deploymentId: string;
            type: string;
            message: string;
            tx?: string;
            /** Format: date-time */
            created_at: string;
        };
        /** Jobs */
        Jobs: {
            tx: string;
            job: string;
            deployment: string;
            status: "PENDING" | "CONFIRMED" | "COMPLETED";
            /** Format: date-time */
            created_at: string;
        };
        /** PublicKey */
        PublicKey: string;
        /** Task */
        Task: {
            task: "LIST" | "EXTEND" | "STOP";
            deploymentId: string;
            tx?: string;
            /** Format: date-time */
            due_at: string;
            /** Format: date-time */
            created_at: string;
        };
        /** Vault */
        Vault: {
            vault: string;
            owner: string;
            /** Format: date-time */
            created_at: string;
        };
        /** Vaults */
        Vaults: {
            vault: string;
            owner: string;
            /** Format: date-time */
            created_at: string;
        }[];
        /** Revision */
        Revision: {
            revision: number;
            deployment: string;
            ipfs_definition_hash: string;
            job_definition: {
                version: string;
                /** @enum {string} */
                type: "container";
                logistics?: {
                    send?: {
                        /**
                         * @description api-listen - we have an api listenening for the job poster to send the job description
                         *     api        - we recieve an api endpoint to query and it will return the job description
                         * @enum {string}
                         */
                        type: "api" | "api-listen";
                        args: {
                            endpoint?: string;
                        };
                    };
                    receive?: {
                        /**
                         * @description api-listen - we have an api that listen for request from the job poster, so we can return the result to them
                         *     api        - we get an api to post the result to
                         * @enum {string}
                         */
                        type: "api" | "api-listen";
                        args: {
                            endpoint?: string;
                        };
                    };
                };
                deployment_id?: string;
                meta?: {
                    trigger?: string;
                    system_resources?: {
                        [key: string]: string | number;
                    };
                } & {
                    [key: string]: unknown;
                };
                global?: {
                    image?: string;
                    gpu?: boolean;
                    entrypoint?: string | string[];
                    env?: {
                        [key: string]: string;
                    };
                    work_dir?: string;
                    variables?: {
                        [key: string]: string;
                    };
                };
                /** @description **********************
                 *     Job Definition Types *
                 *     ********************** */
                ops: {
                    /** @enum {string} */
                    type: "container/run" | "container/create-volume";
                    id: string;
                    args: {
                        image: string;
                        aliases?: string | string[];
                        cmd?: string | string[];
                        volumes?: {
                            name: string;
                            dest: string;
                        }[];
                        expose?: number | string | {
                            __spread__: string;
                        } | (number | string | {
                            port: number | string;
                            /** @enum {string} */
                            type?: "web" | "api" | "websocket" | "webapi" | "none";
                            health_checks?: ({
                                /** @enum {string} */
                                type: "http";
                                path: string;
                                /** @enum {string} */
                                method: "GET" | "POST" | "PUT" | "DELETE";
                                expected_status: number;
                                /** @description Construct a type with a set of properties K of type T */
                                headers?: {
                                    [key: string]: string;
                                };
                                body?: unknown;
                                continuous: boolean;
                            } | {
                                /** @enum {string} */
                                type: "websocket";
                                expected_response: string;
                                continuous: boolean;
                            })[];
                        } | {
                            __spread__: string;
                        })[];
                        private?: boolean;
                        gpu?: boolean;
                        work_dir?: string;
                        output?: string;
                        entrypoint?: string | string[];
                        env?: {
                            [key: string]: string;
                        };
                        required_vram?: number;
                        resources?: ({
                            /** @enum {string} */
                            type: "S3";
                            target: string;
                            url?: string;
                            allowWrite?: boolean;
                            files?: string[];
                            IAM?: {
                                REGION: string;
                                ACCESS_KEY_ID: string;
                                SECRET_ACCESS_KEY: string;
                            };
                        } | {
                            /** @enum {string} */
                            type: "S3";
                            target: string;
                            bucket: string;
                            url?: string;
                            allowWrite?: boolean;
                            IAM?: {
                                REGION: string;
                                ACCESS_KEY_ID: string;
                                SECRET_ACCESS_KEY: string;
                            };
                        } | {
                            /** @enum {string} */
                            type: "S3";
                            target: string;
                            buckets: {
                                url: string;
                                files?: string[];
                            }[];
                            url?: string;
                            allowWrite?: boolean;
                            IAM?: {
                                REGION: string;
                                ACCESS_KEY_ID: string;
                                SECRET_ACCESS_KEY: string;
                            };
                        } | {
                            /** @enum {string} */
                            type: "HF";
                            target: string;
                            repo: string;
                            revision?: string;
                            files?: string[];
                            accessToken?: string;
                        } | {
                            /** @enum {string} */
                            type: "Ollama";
                            model: string;
                            target?: string;
                        } | {
                            __spread__: string;
                        } | "__remove-if-empty__")[];
                        authentication?: {
                            docker?: {
                                username?: string;
                                password?: string;
                                email?: string;
                                server?: string;
                            };
                        };
                    } | {
                        name: string;
                    };
                    results?: {
                        [key: string]: string | {
                            regex: string;
                            logType: (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | ("stdin" | "stdout" | "stderr" | "nodeerr")[];
                        };
                    };
                    execution?: {
                        group?: string;
                        depends_on: string[];
                        stop_if_dependent_stops?: boolean;
                    } | {
                        group?: string;
                    };
                }[];
            };
            /** Format: date-time */
            created_at: string;
        };
        /** JobDefinition */
        JobDefinition: {
            version: string;
            /** @enum {string} */
            type: "container";
            logistics?: {
                send?: {
                    /**
                     * @description api-listen - we have an api listenening for the job poster to send the job description
                     *     api        - we recieve an api endpoint to query and it will return the job description
                     * @enum {string}
                     */
                    type: "api" | "api-listen";
                    args: {
                        endpoint?: string;
                    };
                };
                receive?: {
                    /**
                     * @description api-listen - we have an api that listen for request from the job poster, so we can return the result to them
                     *     api        - we get an api to post the result to
                     * @enum {string}
                     */
                    type: "api" | "api-listen";
                    args: {
                        endpoint?: string;
                    };
                };
            };
            deployment_id?: string;
            meta?: {
                trigger?: string;
                system_resources?: {
                    [key: string]: string | number;
                };
            } & {
                [key: string]: unknown;
            };
            global?: {
                image?: string;
                gpu?: boolean;
                entrypoint?: string | string[];
                env?: {
                    [key: string]: string;
                };
                work_dir?: string;
                variables?: {
                    [key: string]: string;
                };
            };
            /** @description **********************
             *     Job Definition Types *
             *     ********************** */
            ops: {
                /** @enum {string} */
                type: "container/run" | "container/create-volume";
                id: string;
                args: {
                    image: string;
                    aliases?: string | string[];
                    cmd?: string | string[];
                    volumes?: {
                        name: string;
                        dest: string;
                    }[];
                    expose?: number | string | {
                        __spread__: string;
                    } | (number | string | {
                        port: number | string;
                        /** @enum {string} */
                        type?: "web" | "api" | "websocket" | "webapi" | "none";
                        health_checks?: ({
                            /** @enum {string} */
                            type: "http";
                            path: string;
                            /** @enum {string} */
                            method: "GET" | "POST" | "PUT" | "DELETE";
                            expected_status: number;
                            /** @description Construct a type with a set of properties K of type T */
                            headers?: {
                                [key: string]: string;
                            };
                            body?: unknown;
                            continuous: boolean;
                        } | {
                            /** @enum {string} */
                            type: "websocket";
                            expected_response: string;
                            continuous: boolean;
                        })[];
                    } | {
                        __spread__: string;
                    })[];
                    private?: boolean;
                    gpu?: boolean;
                    work_dir?: string;
                    output?: string;
                    entrypoint?: string | string[];
                    env?: {
                        [key: string]: string;
                    };
                    required_vram?: number;
                    resources?: ({
                        /** @enum {string} */
                        type: "S3";
                        target: string;
                        url?: string;
                        allowWrite?: boolean;
                        files?: string[];
                        IAM?: {
                            REGION: string;
                            ACCESS_KEY_ID: string;
                            SECRET_ACCESS_KEY: string;
                        };
                    } | {
                        /** @enum {string} */
                        type: "S3";
                        target: string;
                        bucket: string;
                        url?: string;
                        allowWrite?: boolean;
                        IAM?: {
                            REGION: string;
                            ACCESS_KEY_ID: string;
                            SECRET_ACCESS_KEY: string;
                        };
                    } | {
                        /** @enum {string} */
                        type: "S3";
                        target: string;
                        buckets: {
                            url: string;
                            files?: string[];
                        }[];
                        url?: string;
                        allowWrite?: boolean;
                        IAM?: {
                            REGION: string;
                            ACCESS_KEY_ID: string;
                            SECRET_ACCESS_KEY: string;
                        };
                    } | {
                        /** @enum {string} */
                        type: "HF";
                        target: string;
                        repo: string;
                        revision?: string;
                        files?: string[];
                        accessToken?: string;
                    } | {
                        /** @enum {string} */
                        type: "Ollama";
                        model: string;
                        target?: string;
                    } | {
                        __spread__: string;
                    } | "__remove-if-empty__")[];
                    authentication?: {
                        docker?: {
                            username?: string;
                            password?: string;
                            email?: string;
                            server?: string;
                        };
                    };
                } | {
                    name: string;
                };
                results?: {
                    [key: string]: string | {
                        regex: string;
                        logType: (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | (("stdin" | "stdout" | "stderr" | "nodeerr") | ("stdin" | "stdout" | "stderr" | "nodeerr"))[] | ("stdin" | "stdout" | "stderr" | "nodeerr")[];
                    };
                };
                execution?: {
                    group?: string;
                    depends_on: string[];
                    stop_if_dependent_stops?: boolean;
                } | {
                    group?: string;
                };
            }[];
        };
        /**
         * JobResults
         * @description **********************
         *      Job Result Types   *
         *     **********************
         */
        JobResults: {
            status: string;
            startTime: number;
            endTime: number | null;
            errors?: unknown[];
            opStates: {
                providerId: string | null;
                operationId: string | null;
                group: string | null;
                status: string | null;
                startTime: number | null;
                endTime: number | null;
                exitCode: number | null;
                logs: {
                    /** @enum {string} */
                    type: "stdin" | "stdout" | "stderr" | "nodeerr";
                    log?: string;
                }[];
                results?: {
                    [key: string]: string | string[];
                };
            }[];
            secrets?: {
                /** @enum {string} */
                urlmode?: "private" | "public";
            } & {
                [key: string]: {
                    [key: string]: {
                        opID: string;
                        port: string | number;
                        url: string;
                        /** @enum {string} */
                        status: "ONLINE" | "OFFLINE" | "UNKNOWN";
                    };
                } | ("private" | "public");
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "postApiJobsCreate-with-credits": {
        parameters: {
            query?: never;
            header: {
                /** @description Authorization header: Bearer <jwt> or Bearer <key> */
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ipfsHash: string;
                    market: string;
                    timeout?: string | number;
                    host?: string;
                };
                "multipart/form-data": {
                    ipfsHash: string;
                    market: string;
                    timeout?: string | number;
                    host?: string;
                };
                "text/plain": {
                    ipfsHash: string;
                    market: string;
                    timeout?: string | number;
                    host?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        jobAddress: string;
                        costUSD: number;
                        creditsUsed: number;
                        reservationId: string;
                        project: string;
                        market: string;
                        timeout: number;
                    };
                    "multipart/form-data": {
                        jobAddress: string;
                        costUSD: number;
                        creditsUsed: number;
                        reservationId: string;
                        project: string;
                        market: string;
                        timeout: number;
                    };
                    "text/plain": {
                        jobAddress: string;
                        costUSD: number;
                        creditsUsed: number;
                        reservationId: string;
                        project: string;
                        market: string;
                        timeout: number;
                    };
                };
            };
        };
    };
    "postApiJobsExtend-with-credits": {
        parameters: {
            query?: never;
            header: {
                /** @description Authorization header: Bearer <jwt> or Bearer <key> */
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    jobAddress: string;
                    extensionSeconds: number;
                };
                "multipart/form-data": {
                    jobAddress: string;
                    extensionSeconds: number;
                };
                "text/plain": {
                    jobAddress: string;
                    extensionSeconds: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        jobAddress: string;
                        costUSD: number;
                        creditsUsed: number;
                        reservationId: string;
                        extensionSeconds: number;
                        transactionId: string;
                    };
                    "multipart/form-data": {
                        jobAddress: string;
                        costUSD: number;
                        creditsUsed: number;
                        reservationId: string;
                        extensionSeconds: number;
                        transactionId: string;
                    };
                    "text/plain": {
                        jobAddress: string;
                        costUSD: number;
                        creditsUsed: number;
                        reservationId: string;
                        extensionSeconds: number;
                        transactionId: string;
                    };
                };
            };
        };
    };
    "postApiJobsStop-with-credits": {
        parameters: {
            query?: never;
            header: {
                /** @description Authorization header: Bearer <jwt> or Bearer <key> */
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    jobAddress: string;
                };
                "multipart/form-data": {
                    jobAddress: string;
                };
                "text/plain": {
                    jobAddress: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        message: string;
                        jobAddress: string;
                        transactionId: string;
                        delisted: boolean;
                    };
                    "multipart/form-data": {
                        success: boolean;
                        message: string;
                        jobAddress: string;
                        transactionId: string;
                        delisted: boolean;
                    };
                    "text/plain": {
                        success: boolean;
                        message: string;
                        jobAddress: string;
                        transactionId: string;
                        delisted: boolean;
                    };
                };
            };
        };
    };
    getApiJobsByAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiMarkets: {
        parameters: {
            query?: {
                filterKey?: string;
                filterValue?: string;
                limit?: string;
                type?: "PREMIUM" | "COMMUNITY" | "OTHER";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        address: string;
                        slug: string;
                        name: string;
                        sft: string;
                        type: "PREMIUM" | "COMMUNITY" | "OTHER";
                        usd_reward_per_hour: unknown;
                        nos_reward_per_second: number;
                        nos_job_price_per_second: number;
                        network_fee_percentage: number;
                        premium_community_relation: string | null;
                        gpu_types: string[];
                        required_images: string[];
                        required_remote_resources: ({
                            /** @constant */
                            type: "Ollama";
                            model: string;
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                            IAM: {
                                access_key_id: string;
                                secret_access_key: string;
                            };
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                        })[];
                        nodes?: unknown[];
                        client: boolean;
                        lowest_vram?: number;
                        max_usd_uptime_reward_per_day?: number;
                    }[];
                    "multipart/form-data": {
                        address: string;
                        slug: string;
                        name: string;
                        sft: string;
                        type: "PREMIUM" | "COMMUNITY" | "OTHER";
                        usd_reward_per_hour: unknown;
                        nos_reward_per_second: number;
                        nos_job_price_per_second: number;
                        network_fee_percentage: number;
                        premium_community_relation: string | null;
                        gpu_types: string[];
                        required_images: string[];
                        required_remote_resources: ({
                            /** @constant */
                            type: "Ollama";
                            model: string;
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                            IAM: {
                                access_key_id: string;
                                secret_access_key: string;
                            };
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                        })[];
                        nodes?: unknown[];
                        client: boolean;
                        lowest_vram?: number;
                        max_usd_uptime_reward_per_day?: number;
                    }[];
                    "text/plain": {
                        address: string;
                        slug: string;
                        name: string;
                        sft: string;
                        type: "PREMIUM" | "COMMUNITY" | "OTHER";
                        usd_reward_per_hour: unknown;
                        nos_reward_per_second: number;
                        nos_job_price_per_second: number;
                        network_fee_percentage: number;
                        premium_community_relation: string | null;
                        gpu_types: string[];
                        required_images: string[];
                        required_remote_resources: ({
                            /** @constant */
                            type: "Ollama";
                            model: string;
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                            IAM: {
                                access_key_id: string;
                                secret_access_key: string;
                            };
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                        })[];
                        nodes?: unknown[];
                        client: boolean;
                        lowest_vram?: number;
                        max_usd_uptime_reward_per_day?: number;
                    }[];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        name: string;
                        message: string;
                    };
                    "multipart/form-data": {
                        name: string;
                        message: string;
                    };
                    "text/plain": {
                        name: string;
                        message: string;
                    };
                };
            };
        };
    };
    getApiMarketsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        address: string;
                        slug: string;
                        name: string;
                        sft: string;
                        type: "PREMIUM" | "COMMUNITY" | "OTHER";
                        usd_reward_per_hour: unknown;
                        nos_reward_per_second: number;
                        nos_job_price_per_second: number;
                        network_fee_percentage: number;
                        premium_community_relation: string | null;
                        gpu_types: string[];
                        required_images: string[];
                        required_remote_resources: ({
                            /** @constant */
                            type: "Ollama";
                            model: string;
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                            IAM: {
                                access_key_id: string;
                                secret_access_key: string;
                            };
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                        })[];
                        nodes?: unknown[];
                        client: boolean;
                        lowest_vram?: number;
                        max_usd_uptime_reward_per_day?: number;
                    };
                    "multipart/form-data": {
                        address: string;
                        slug: string;
                        name: string;
                        sft: string;
                        type: "PREMIUM" | "COMMUNITY" | "OTHER";
                        usd_reward_per_hour: unknown;
                        nos_reward_per_second: number;
                        nos_job_price_per_second: number;
                        network_fee_percentage: number;
                        premium_community_relation: string | null;
                        gpu_types: string[];
                        required_images: string[];
                        required_remote_resources: ({
                            /** @constant */
                            type: "Ollama";
                            model: string;
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                            IAM: {
                                access_key_id: string;
                                secret_access_key: string;
                            };
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                        })[];
                        nodes?: unknown[];
                        client: boolean;
                        lowest_vram?: number;
                        max_usd_uptime_reward_per_day?: number;
                    };
                    "text/plain": {
                        address: string;
                        slug: string;
                        name: string;
                        sft: string;
                        type: "PREMIUM" | "COMMUNITY" | "OTHER";
                        usd_reward_per_hour: unknown;
                        nos_reward_per_second: number;
                        nos_job_price_per_second: number;
                        network_fee_percentage: number;
                        premium_community_relation: string | null;
                        gpu_types: string[];
                        required_images: string[];
                        required_remote_resources: ({
                            /** @constant */
                            type: "Ollama";
                            model: string;
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                            IAM: {
                                access_key_id: string;
                                secret_access_key: string;
                            };
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url: string;
                        })[];
                        nodes?: unknown[];
                        client: boolean;
                        lowest_vram?: number;
                        max_usd_uptime_reward_per_day?: number;
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        name: string;
                        message: string;
                    };
                    "multipart/form-data": {
                        name: string;
                        message: string;
                    };
                    "text/plain": {
                        name: string;
                        message: string;
                    };
                };
            };
        };
    };
    "getApiMarketsByIdRequired-resources": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        required_images: string[];
                        required_remote_resources: ({
                            /** @constant */
                            type: "Ollama";
                            model: string;
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url?: string;
                            files?: string[];
                            buckets?: {
                                url: string;
                                files?: string[];
                            }[];
                            IAM: {
                                access_key_id: string;
                                secret_access_key: string;
                            };
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url?: string;
                            files?: string[];
                            buckets?: {
                                url: string;
                                files?: string[];
                            }[];
                        })[];
                    };
                    "multipart/form-data": {
                        required_images: string[];
                        required_remote_resources: ({
                            /** @constant */
                            type: "Ollama";
                            model: string;
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url?: string;
                            files?: string[];
                            buckets?: {
                                url: string;
                                files?: string[];
                            }[];
                            IAM: {
                                access_key_id: string;
                                secret_access_key: string;
                            };
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url?: string;
                            files?: string[];
                            buckets?: {
                                url: string;
                                files?: string[];
                            }[];
                        })[];
                    };
                    "text/plain": {
                        required_images: string[];
                        required_remote_resources: ({
                            /** @constant */
                            type: "Ollama";
                            model: string;
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url?: string;
                            files?: string[];
                            buckets?: {
                                url: string;
                                files?: string[];
                            }[];
                            IAM: {
                                access_key_id: string;
                                secret_access_key: string;
                            };
                        } | {
                            type: "S3" | "Ollama" | "HF";
                            url?: string;
                            files?: string[];
                            buckets?: {
                                url: string;
                                files?: string[];
                            }[];
                        })[];
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        name: string;
                        message: string;
                    };
                    "multipart/form-data": {
                        name: string;
                        message: string;
                    };
                    "text/plain": {
                        name: string;
                        message: string;
                    };
                };
            };
        };
    };
    getApiCreditsBalance: {
        parameters: {
            query?: never;
            header: {
                /** @description Authorization header: Bearer <jwt> or Bearer <key> */
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Total credits assigned to the user (USD) */
                        assignedCredits: number;
                        /** @description Credits reserved for pending jobs (USD) */
                        reservedCredits: number;
                        /** @description Credits spent/settled for completed jobs (USD) */
                        settledCredits: number;
                    };
                    "multipart/form-data": {
                        /** @description Total credits assigned to the user (USD) */
                        assignedCredits: number;
                        /** @description Credits reserved for pending jobs (USD) */
                        reservedCredits: number;
                        /** @description Credits spent/settled for completed jobs (USD) */
                        settledCredits: number;
                    };
                    "text/plain": {
                        /** @description Total credits assigned to the user (USD) */
                        assignedCredits: number;
                        /** @description Credits reserved for pending jobs (USD) */
                        reservedCredits: number;
                        /** @description Credits spent/settled for completed jobs (USD) */
                        settledCredits: number;
                    };
                };
            };
        };
    };
}
