/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/documentation/json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all user deployments. */
        get: {
            parameters: {
                query?: never;
                header: {
                    "x-user-id": string;
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of deployments. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Deployments"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployment/{deployment}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a specific deployment by ID. */
        get: {
            parameters: {
                query?: never;
                header: {
                    "x-user-id": string;
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Gets a deployment by ID. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Deployment"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployment/{deployment}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get scheduled tasks for a specific deployment. */
        get: {
            parameters: {
                query?: never;
                header: {
                    "x-user-id": string;
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of scheduled tasks for the deployment. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Task"][];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployment/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new deployment. */
        post: {
            parameters: {
                query?: never;
                header: {
                    "x-user-id": string;
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["DeploymentCreateBody"];
                };
            };
            responses: {
                /** @description Deployment created successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Deployment"];
                    };
                };
                /** @description Invalid request body. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployment/{deployment}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Start an existing deployment. */
        post: {
            parameters: {
                query?: never;
                header: {
                    "x-user-id": string;
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deployment started successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status: "STARTING";
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployment/{deployment}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new deployment. */
        post: {
            parameters: {
                query?: never;
                header: {
                    "x-user-id": string;
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path: {
                    deployment: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["DeploymentCreateBody"];
                };
            };
            responses: {
                /** @description Deployment created successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Deployment"];
                    };
                };
                /** @description Invalid request body. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/deployment/{deployment}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Archive a deployment */
        patch: {
            parameters: {
                query?: never;
                header: {
                    "x-user-id": string;
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deployment archived successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status: "ARCHIVED";
                            /** Format: date-time */
                            updated_at: string;
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/deployment/{deployment}/update-replica-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update the replica count of a deployment */
        patch: {
            parameters: {
                query?: never;
                header: {
                    "x-user-id": string;
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        replicas: number;
                    };
                };
            };
            responses: {
                /** @description Deployment replica count updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            replicas: number;
                            /** Format: date-time */
                            updated_at: string;
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/deployment/{deployment}/update-timeout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update deployment timeout */
        patch: {
            parameters: {
                query?: never;
                header: {
                    "x-user-id": string;
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path: {
                    deployment: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        timeout: number;
                    };
                };
            };
            responses: {
                /** @description Deployment timeout updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            timeout: number;
                            updated_at: string;
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Deployment not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/vault/{vault}/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Withdraw from a vault. */
        post: {
            parameters: {
                query?: never;
                header: {
                    "x-user-id": string;
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path: {
                    vault: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        SOL?: number;
                        NOS?: number;
                    };
                };
            };
            responses: {
                /** @description Withdrawal successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            transaction: string;
                        };
                    };
                };
                /** @description Invalid request body. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Vault not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vault/{vault}/update-balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update the balance of a vault. */
        patch: {
            parameters: {
                query?: never;
                header: {
                    "x-user-id": string;
                    /** @description Signed authentication message, */
                    authorization: string;
                };
                path: {
                    vault: components["schemas"]["PublicKey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Balance updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            SOL?: number;
                            NOS?: number;
                        };
                    };
                };
                /** @description Unauthorized. Invalid or missing authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": "Unauthorized";
                    };
                };
                /** @description Vault not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Headers
         * @description Headers for deployment routes
         */
        Headers: {
            "x-user-id": string;
            /** @description Signed authentication message, */
            authorization: string;
        };
        /** Deployment */
        Deployment: {
            id: string;
            name: string;
            vault: string;
            market: string;
            owner: string;
            status: "DRAFT" | "ERROR" | "STARTING" | "RUNNING" | "STOPPING" | "STOPPED" | "INSUFFICIENT_FUNDS" | "ARCHIVED";
            ipfs_definition_hash: string;
            replicas: number;
            timeout: number;
            jobs: {
                job: string;
                deployment: string;
                tx: string;
                /** Format: date-time */
                created_at: string;
            }[];
            events: {
                category: "Deployment" | "Event";
                deploymentId: string;
                type: string;
                message: string;
                tx?: string;
                /** Format: date-time */
                created_at: string;
            }[];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        } & ({
            strategy: "SIMPLE" | "SIMPLE-EXTEND" | "INFINITE";
        } | {
            /** @enum {string} */
            strategy: "SCHEDULED";
            /** @description Cron expression for scheduled deployments */
            schedule: string;
        });
        /** Deployments */
        Deployments: components["schemas"]["Deployment"][];
        /** DeploymentStatus */
        DeploymentStatus: "DRAFT" | "ERROR" | "STARTING" | "RUNNING" | "STOPPING" | "STOPPED" | "INSUFFICIENT_FUNDS" | "ARCHIVED";
        /** DeploymentStrategy */
        DeploymentStrategy: "SIMPLE" | "SIMPLE-EXTEND" | "SCHEDULED" | "INFINITE";
        /** DeploymentCreateBody */
        DeploymentCreateBody: {
            name: string;
            market: string;
            ipfs_definition_hash: string;
            replicas: number;
            timeout: number;
        } & ({
            strategy: "SIMPLE" | "SIMPLE-EXTEND" | "INFINITE";
        } | {
            /** @enum {string} */
            strategy: "SCHEDULED";
            schedule: string;
        });
        /** Error */
        Error: {
            error: string;
        };
        /** Events */
        Events: {
            category: "Deployment" | "Event";
            deploymentId: string;
            type: string;
            message: string;
            tx?: string;
            /** Format: date-time */
            created_at: string;
        };
        /** Jobs */
        Jobs: {
            job: string;
            deployment: string;
            tx: string;
            /** Format: date-time */
            created_at: string;
        };
        /** PublicKey */
        PublicKey: string;
        /** Task */
        Task: {
            task: "LIST" | "EXTEND" | "STOP";
            deploymentId: string;
            tx?: string;
            /** Format: date-time */
            due_at: string;
            /** Format: date-time */
            created_at: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
